{"worksheets":[{"cells":[{"prompt_number":null,"outputs":[{"text":""}],"id":"2db8d8b0-a289-4ac8-b9e9-22d9cda5f8d7","content":["# Nx - Numerical Elixir\r\n![](https://github.com/elixir-nx/nx/raw/main/nx/nx.png)\r\n\r\nhttps://github.com/elixir-nx/nx\r\n\r\nJosÃ© Valim teased us for months about Nx without telling us what it was but now that wait is over and it's finally out!! "],"cell_type":"markdown"},{"prompt_number":null,"outputs":[{"text":""}],"id":"760c3e9f-f5c0-4793-8711-d3e487f97827","content":["# Nx - Numerical Elixir\r\n\r\n_Nx is a multi-dimensional tensors library for Elixir with multi-staged compilation to the CPU/GPU._\r\n\r\nIt aims to address the issue that the BEAM platform performs poorly in compute-intensive domains such as Machine Learning, Numerical Analysis, etc.\r\n\r\nNx includes (https://github.com/elixir-nx/nx/blob/main/nx/README.md):\r\n - typed multi-dimensional tensors (multi-dimensional arrays)\r\n - functions to create, manipulate, and perform operations on tensors\r\n - automatic differentiation (autograd), useful for model training\r\n - backends - work with tensors stored in memory (binary), on the GPU, etc\r\n - numerical definitions - `defn`\r\n   - use a large subset of Elixir syntax to AOT or JIT compile tensor code to CPU or GPU\r\n\r\nAs an API, Nx draws inspiration from Python's `NumPy` and `JAX` libraries.\r\nIt intends to be an Elixir-based alternative to the likes of TensorFlow or PyTorch.\r\n\r\nWith the introduction of Nx, Elixir now can now stake a claim in another domain, allowing us to solve more problems with the one platform!\r\n\r\n"],"cell_type":"markdown"},{"prompt_number":null,"outputs":[{"text":""}],"id":"00c621ce-0a1f-4f7f-a964-9d106e950dd8","content":["## Agenda\r\n - meta\r\n - tensors\r\n - Nx API\r\n - numerical definitions\r\n - backends"],"cell_type":"markdown"},{"prompt_number":null,"outputs":[{"text":""}],"id":"7ea0c8ea-32aa-4415-833f-14137002650d","content":["## Meta\r\n\r\n### Code notebook \r\n\r\nThis environment is an Niex notebook - an interactive Elixir code notebook.\r\n\r\nhttps://github.com/jonklein/niex\r\n\r\nThis particular notebook can be found at https://github.com/rellen/elixir_nx_demo\r\n\r\nEach code block needs to be run in turn, and if an upstream block is changed, then all blocks below that depend upon it will have stale data and must also be re-run.\r\n\r\n### Mathematics disclaimer\r\n\r\nThe author is a beginner in the world of tensors and numerical computing.  Take any mathematical or scientific claim with a grain of salt."],"cell_type":"markdown"},{"prompt_number":null,"outputs":[{"text":""}],"id":"0da4b928-2e2a-4f50-a2ff-12c81ad5d32e","content":["## Tensors\r\n\r\n> _a __tensor__ is an algebraic object that describes a (multilinear) relationship between sets of algebraic objects related to a vector space_\r\n\r\nhttps://en.wikipedia.org/wiki/Tensor"],"cell_type":"markdown"},{"prompt_number":null,"outputs":[{"text":""}],"id":"962ab8f2-2aed-468f-8f31-195b0dc2f515","content":["## Tensors -- take two\r\n\r\nTensors are algebraic objects that may be represented as an array with 0 or more dimensions.\r\nFor instance, a 0-dimension array can represent a scalar value, 1-dimensional array can represent a vector, and so on.\r\n\r\n### Rank\r\n\r\nThe number of dimensions of the array are referred to as the tensor _rank_.  Rank tells you how many indicies are needed to identify a scalar component (element) of the tensor.  For example, we could use the indicies `i` and `j` to identify components in a rank-2 tensor, just like we would use them in a nested loop to iterate through a nested array.\r\n\r\nRelating tensors to other algebraic objects, a rank-0 tensor is a scalar, a rank-1 tensor is a vector, and a rank-2 tensor _can be represented_ as a matrix.\r\n\r\n### Dimension\r\n\r\nThe length of each dimension of the array is the tensor _dimension_.\r\n\r\n--> Under the strict mathematical definition, the lengths of each dimension of the array should all be the same, e.g. a rank-2 tensor of dimension 3 could be represented as a 3x3 array (which is also a 3x3 matrix).  The `i` and `j` indicies above would have values ranging from 0 to 2.\r\n\r\n### Properties\r\n\r\nMathematically, tensors also have some other defining properties, whereby, for example, a tensor describing some physical system has the same meaning regardless of the frame of reference."],"cell_type":"markdown"},{"prompt_number":null,"outputs":[{"text":""}],"id":"257682e4-81c4-4ea4-8762-cc4524b24af1","content":["## Tensors -- Nx-style\r\n\r\nIn Nx, tensors are a data structure that embellishes a multi-dimensional array (__not__ a list) with extra properties, such as a shape, labelled dimensions, and an element type"],"cell_type":"markdown"},{"prompt_number":null,"outputs":[{"text":""}],"id":"e3ce2fd3-c860-4c38-b43d-17abe0b19230","content":["## Tensor creation\r\nhttps://seanmoriarity.com/2021/03/04/nx-tip-of-the-week-3-many-ways-to-create-arrays/"],"cell_type":"markdown"},{"prompt_number":null,"outputs":[{"text":""}],"id":"33c730bb-49c9-433e-8365-fb38985170f5","content":["We can construct a tensor out of a multi-dimensional list"],"cell_type":"markdown"},{"running":false,"prompt_number":0,"outputs":[{"type":"code","text":["#Nx.Tensor<\n  s64[2][3]\n  [\n    [1, 2, 3],\n    [4, 5, 6]\n  ]\n>"]}],"id":"6c4dbb50-19ce-41b3-aa93-6ede67c1cefc","content":["t1 = Nx.tensor([[1,2,3], [4,5,6]])"],"cell_type":"code"},{"running":false,"prompt_number":1,"outputs":[{"type":"code","text":["#Nx.Tensor<\n  f32[x: 3][y: 2]\n  [\n    [1.5, 2.5],\n    [1.0, 3.0],\n    [4.0, 6.0]\n  ]\n>"]}],"id":"de09b483-ea8f-482a-a3d5-449ede5624cd","content":["t2 = Nx.tensor([[1.5, 2.5], [1, 3], [4, 6]], names: [:x, :y])"],"cell_type":"code"},{"prompt_number":null,"outputs":[{"text":""}],"id":"6f2b0b4a-ba9e-42ae-b5b1-7bf8f4425127","content":["The type of each element is inferred or it can be specified"],"cell_type":"markdown"},{"running":false,"prompt_number":2,"outputs":[{"type":"code","text":["#Nx.Tensor<\n  f64[2][2]\n  [\n    [1.5, 2.5],\n    [1.0, 3.0]\n  ]\n>"]}],"id":"dd43fb56-a171-4b77-9fed-acb08cb5af84","content":["t_f64 = Nx.tensor([[1.5, 2.5], [1, 3]], type: {:f, 64})"],"cell_type":"code"},{"prompt_number":null,"outputs":[{"text":""}],"id":"ffba580d-684c-48a1-b038-d40f52b080e4","content":["We can ask a tensor about its properties"],"cell_type":"markdown"},{"running":false,"prompt_number":3,"outputs":[{"type":"code","text":["\"t2 has shape {3, 2}, type {:f, 32}, and dimension names [:x, :y]\""]}],"id":"7190e1cd-665b-4e93-a5ad-bfd2bfd68140","content":["\"t2 has shape #{inspect Nx.shape(t2)}, type #{inspect Nx.type(t2)}, and dimension names #{inspect Nx.names(t2)}\""],"cell_type":"code"},{"prompt_number":null,"outputs":[{"text":""}],"id":"9ea83bdc-5ff1-4d17-80dc-ce06d917df18","content":["Tensors can also be created out of binaries.  This is more efficient than creating from a list as tensors are usually stored as binaries natively, and lists must be fully traversed to build up the binary equivalent."],"cell_type":"markdown"},{"running":false,"prompt_number":4,"outputs":[{"type":"code","text":["#Nx.Tensor<\n  s64[8]\n  [0, 2, 4, 8, 16, 32, 64, 128]\n>"]}],"id":"13500ed5-e65d-46cf-bf3d-449b000cfc75","content":["t3 = Nx.from_binary(<<0::64-signed-native, 2::64-signed-native, 4::64-signed-native, 8::64-signed-native, 16::64-signed-native, 32::64-signed-native, 64::64-signed-native, 128::64-signed-native>>, {:s, 64})"],"cell_type":"code"},{"prompt_number":null,"outputs":[{"text":""}],"id":"e02294b4-83f4-445c-89fc-8d451ad15ef5","content":["`Nx.from_binary/2` creates a flat list from the binary data.  We can reshape the tensor if the data actually represents multi-dimensional data.  This operation does not actually modify the underlying binary, it merely reshapes the input tensor."],"cell_type":"markdown"},{"running":false,"prompt_number":5,"outputs":[{"type":"code","text":["#Nx.Tensor<\n  s64[2][4]\n  [\n    [0, 2, 4, 8],\n    [16, 32, 64, 128]\n  ]\n>"]}],"id":"451f658d-96ad-479b-9003-bc141b2fef51","content":["t3 |> Nx.reshape({2,4})"],"cell_type":"code"},{"prompt_number":null,"outputs":[{"text":""}],"id":"45423490-7a8e-4a42-9c3b-9e66e710e9ca","content":["We can create tensors from shapes and other tensors with `Nx.broadcast/3`"],"cell_type":"markdown"},{"running":false,"prompt_number":6,"outputs":[{"type":"code","text":["#Nx.Tensor<\n  s64[3][2]\n  [\n    [1, 1],\n    [1, 1],\n    [1, 1]\n  ]\n>"]}],"id":"32c28cba-f1f8-49a1-9d68-6fb285d60f1d","content":["Nx.broadcast(1, {3, 2})"],"cell_type":"code"},{"running":false,"prompt_number":7,"outputs":[{"type":"code","text":["#Nx.Tensor<\n  s64[4][3]\n  [\n    [1, 2, 3],\n    [1, 2, 3],\n    [1, 2, 3],\n    [1, 2, 3]\n  ]\n>"]}],"id":"3735f5e6-9e27-4f47-9372-9c921556eaef","content":["Nx.broadcast(Nx.tensor([1,2,3]), {4, 3})"],"cell_type":"code"},{"prompt_number":null,"outputs":[{"text":""}],"id":"56a76bcd-9ab3-4d2a-84a3-a1b2e1ed5578","content":["`Nx.iota/2` can be used to create a tensor with increasing values"],"cell_type":"markdown"},{"running":false,"prompt_number":8,"outputs":[{"type":"code","text":["#Nx.Tensor<\n  s64[4][4]\n  [\n    [0, 1, 2, 3],\n    [4, 5, 6, 7],\n    [8, 9, 10, 11],\n    [12, 13, 14, 15]\n  ]\n>"]}],"id":"560f17bb-1f71-410a-a26f-58dd36aeab51","content":["Nx.iota({4,4})"],"cell_type":"code"},{"running":false,"prompt_number":9,"outputs":[{"type":"code","text":["#Nx.Tensor<\n  s64[4][4]\n  [\n    [0, 0, 0, 0],\n    [1, 1, 1, 1],\n    [2, 2, 2, 2],\n    [3, 3, 3, 3]\n  ]\n>"]}],"id":"2a2b6459-d801-4d94-ae8f-5a81905f4492","content":["Nx.iota({4,4}, axis: 0)"],"cell_type":"code"},{"prompt_number":null,"outputs":[{"text":""}],"id":"1fee28d6-3d37-4864-b451-9a6d9c3ad448","content":["Operations, which we will look at next, can be used with `Nx.iota/2` to create interesting tensors"],"cell_type":"markdown"},{"running":false,"prompt_number":10,"outputs":[{"type":"code","text":["#Nx.Tensor<\n  u8[3][3]\n  [\n    [1, 0, 0],\n    [0, 1, 0],\n    [0, 0, 1]\n  ]\n>"]}],"id":"e37786c6-63e2-4446-b355-06f25b42d838","content":["a = Nx.iota({3, 3}, axis: 0)\r\nb = Nx.iota({3, 3}, axis: 1)\r\nNx.equal(a, b)"],"cell_type":"code"},{"prompt_number":null,"outputs":[{"text":""}],"id":"d246c495-9826-4b49-bef3-01c71a9401c6","content":["## Tensor operations\r\n\r\nNx, being tensor/array based, may lead us to guess that we can use `Enum`, or something like it, to manipulate tensors.\r\n\r\nIndeed, Nx does provide `Nx.map/3` and `Nx.reduce/3`.  However, use of these functions is discouraged as they can lead to verbose and inefficient code.\r\n\r\nFortunately, Nx provides many _tensor-aware_ functions for element-wise and aggregate operations.\r\n\r\nhttps://seanmoriarity.com/2021/02/24/nx-tip-of-the-week-2-tensor-manipulation-for-elixir-programmers/\r\n"],"cell_type":"markdown"},{"prompt_number":null,"outputs":[{"text":""}],"id":"a89d8758-883b-40da-a122-e2fc538642d4","content":["Element-wise unary ops\r\n\r\n```\r\n:exp, :expm1, :log, :log1p, :logistic, :cos, :sin, :tanh, :sqrt, :rsqrt, :cbrt,\r\n:acosh, :asinh, :atanh, :acos, :asin, :atan, :cosh, :sinh,\r\n:erf, :erfc, :erf_inv\r\n:negate\r\n:count_leading_zeros, :population_count, :bitwise_not\r\n:abs, :sign\r\n:floor, :ceil, :round\r\n```"],"cell_type":"markdown"},{"running":false,"prompt_number":11,"outputs":[{"type":"code","text":["#Nx.Tensor<\n  f32[3]\n  [2.7182817459106445, 7.389056205749512, 20.08553695678711]\n>"]}],"id":"e2faf110-49f7-4049-9444-6cba1e8560e8","content":["Nx.tensor([1,2,3]) |> Nx.exp"],"cell_type":"code"},{"running":false,"prompt_number":12,"outputs":[{"type":"code","text":["#Nx.Tensor<\n  f32[1][1000]\n  [\n    [0.0, 0.012565669603645802, 0.025129355490207672, 0.03768907114863396, 0.0502428375184536, 0.06278867274522781, 0.07532458752393723, 0.08784861117601395, 0.10035876929759979, 0.11285307258367538, 0.12532955408096313, 0.13778625428676605, 0.15022119879722595, 0.16263242065906525, 0.17501795291900635, 0.18737585842609406, 0.19970417022705078, 0.21200095117092133, 0.2242642641067505, 0.23649215698242188, 0.24868270754814148, 0.2608340084552765, 0.2729440927505493, 0.28501108288764954, 0.2970331013202667, 0.3090081810951233, 0.3209344744682312, 0.33281010389328003, 0.34463319182395935, 0.35640183091163635, 0.3681142330169678, 0.3797684609889984, 0.3913627564907074, 0.4028952419757843, 0.41436412930488586, 0.42576757073402405, 0.4371037781238556, 0.44837096333503723, 0.4595673680305481, 0.47069117426872253, 0.48174068331718445, 0.4927141070365906, 0.5036097764968872, 0.5144258737564087, 0.5251607894897461, 0.5358126759529114, 0.5463801026344299, 0.556861162185669, 0.5672543048858643, 0.5775578618049622, ...]\n  ]\n>"]}],"id":"129bb065-52e3-40a7-a011-be748644f33e","content":["t_sin_x = Nx.iota({1,1000}) |> Nx.multiply(4 * 3.1415/1000)\r\nt_sin_y = t_sin_x |> Nx.sin"],"cell_type":"code"},{"running":false,"prompt_number":13,"outputs":[{"type":"html","text":"<div class=\"chart\" style=\"width: 480px; height: 360px\" phx-hook=\"NiexChart\" data-chart='{\"type\":\"LineChart\",\"options\":{\"width\":480,\"points\":false,\"height\":360},\"data\":[[0.0,0.0],[0.01256600022315979,0.012565669603645802],[0.02513200044631958,0.025129355490207672],[0.03769800066947937,0.03768907114863396],[0.05026400089263916,0.0502428375184536],[0.06283000111579895,0.06278867274522781],[0.07539600133895874,0.07532458752393723],[0.08796200156211853,0.08784861117601395],[0.10052800178527832,0.10035876929759979],[0.11309400200843811,0.11285307258367538],[0.1256600022315979,0.12532955408096313],[0.1382260024547577,0.13778625428676605],[0.15079200267791748,0.15022119879722595],[0.16335800290107727,0.16263242065906525],[0.17592400312423706,0.17501795291900635],[0.18849000334739685,0.18737585842609406],[0.20105600357055664,0.19970417022705078],[0.21362200379371643,0.21200095117092133],[0.22618800401687622,0.2242642641067505],[0.238754004240036,0.23649215698242188],[0.2513200044631958,0.24868270754814148],[0.2638860046863556,0.2608340084552765],[0.2764520049095154,0.2729440927505493],[0.28901800513267517,0.28501108288764954],[0.30158400535583496,0.2970331013202667],[0.31415000557899475,0.3090081810951233],[0.32671600580215454,0.3209344744682312],[0.33928200602531433,0.33281010389328003],[0.3518480062484741,0.34463319182395935],[0.3644140064716339,0.35640183091163635],[0.3769800066947937,0.3681142330169678],[0.3895460069179535,0.3797684609889984],[0.4021120071411133,0.3913627564907074],[0.41467800736427307,0.4028952419757843],[0.42724400758743286,0.41436412930488586],[0.43981000781059265,0.42576757073402405],[0.45237600803375244,0.4371037781238556],[0.46494200825691223,0.44837096333503723],[0.477508008480072,0.4595673680305481],[0.4900740087032318,0.47069117426872253],[0.5026400089263916,0.48174068331718445],[0.515205979347229,0.4927141070365906],[0.5277720093727112,0.5036097764968872],[0.5403380393981934,0.5144258737564087],[0.5529040098190308,0.5251607894897461],[0.5654699802398682,0.5358126759529114],[0.5780360102653503,0.5463801026344299],[0.5906020402908325,0.556861162185669],[0.6031680107116699,0.5672543048858643],[0.6157339811325073,0.5775578618049622],[0.6283000111579895,0.5877702832221985],[0.6408660411834717,0.5978898406028748],[0.6534320116043091,0.6079149842262268],[0.6659979820251465,0.6178441643714905],[0.6785640120506287,0.6276757717132568],[0.6911300420761108,0.6374083161354065],[0.7036960124969482,0.6470401287078857],[0.7162619829177856,0.6565698385238647],[0.7288280129432678,0.6659958362579346],[0.74139404296875,0.6753166913986206],[0.7539600133895874,0.6845309138298035],[0.7665259838104248,0.6936370134353638],[0.779092013835907,0.7026336193084717],[0.7916580438613892,0.7115193009376526],[0.8042240142822266,0.7202925682067871],[0.816789984703064,0.7289521098136902],[0.8293560147285461,0.7374966144561768],[0.8419220447540283,0.7459246516227722],[0.8544880151748657,0.7542348504066467],[0.8670539855957031,0.76242595911026],[0.8796200156211853,0.7704967260360718],[0.8921860456466675,0.778445839881897],[0.9047520160675049,0.7862719297409058],[0.9173179864883423,0.7939739227294922],[0.9298840165138245,0.801550567150116],[0.9424500465393066,0.8090006709098816],[0.955016016960144,0.8163229823112488],[0.9675819873809814,0.8235164284706116],[0.9801480174064636,0.8305798172950745],[0.9927140474319458,0.8375120759010315],[1.0052800178527832,0.8443120718002319],[1.0178459882736206,0.8509787321090698],[1.030411958694458,0.8575109839439392],[1.042978048324585,0.8639079332351685],[1.0555440187454224,0.8701684474945068],[1.0681099891662598,0.8762915134429932],[1.0806760787963867,0.8822762370109558],[1.0932420492172241,0.8881216645240784],[1.1058080196380615,0.8938267827033997],[1.118373990058899,0.8993908166885376],[1.1309399604797363,0.9048128128051758],[1.1435060501098633,0.9100919961929321],[1.1560720205307007,0.9152274131774902],[1.168637990951538,0.9202183485031128],[1.181204080581665,0.9250640273094177],[1.1937700510025024,0.9297635555267334],[1.2063360214233398,0.9343162775039673],[1.2189019918441772,0.9387214779853821],[1.2314679622650146,0.9429784417152405],[1.2440340518951416,0.9470865726470947],[1.256600022315979,0.9510450959205627],[1.2691659927368164,0.9548534154891968],[1.2817320823669434,0.9585110545158386],[1.2942980527877808,0.9620172381401062],[1.3068640232086182,0.9653716087341309],[1.3194299936294556,0.9685735106468201],[1.331995964050293,0.9716224074363708],[1.34456205368042,0.9745180010795593],[1.3571280241012573,0.977259635925293],[1.3696939945220947,0.9798469543457031],[1.3822600841522217,0.9822795987129211],[1.394826054573059,0.9845571517944336],[1.4073920249938965,0.986679196357727],[1.4199579954147339,0.9886454343795776],[1.4325239658355713,0.9904556274414063],[1.4450900554656982,0.9921093583106995],[1.4576560258865356,0.993606448173523],[1.470221996307373,0.9949466586112976],[1.4827880859375,0.9961297512054443],[1.4953540563583374,0.9971556067466736],[1.5079200267791748,0.9980239272117615],[1.5204859972000122,0.998734712600708],[1.5330519676208496,0.9992877840995789],[1.5456180572509766,0.9996830224990845],[1.558184027671814,0.9999204874038696],[1.5707499980926514,1.0],[1.5833160877227783,0.9999216198921204],[1.5958820581436157,0.9996853470802307],[1.6084480285644531,0.9992912411689758],[1.6210139989852905,0.9987393617630005],[1.633579969406128,0.9980297684669495],[1.6461460590362549,0.9971625804901123],[1.6587120294570923,0.9961379170417786],[1.6712779998779297,0.9949559569358826],[1.6838440895080566,0.9936168789863586],[1.696410059928894,0.9921209812164307],[1.7089760303497314,0.9904683828353882],[1.7215420007705688,0.9886593818664551],[1.7341079711914063,0.9866942763328552],[1.7466740608215332,0.9845733642578125],[1.7592400312423706,0.9822969436645508],[1.771806001663208,0.9798654913902283],[1.784372091293335,0.9772792458534241],[1.7969380617141724,0.9745387434959412],[1.8095040321350098,0.9716443419456482],[1.8220700025558472,0.9685965180397034],[1.8346359729766846,0.9653957486152649],[1.8472020626068115,0.962042510509491],[1.859768033027649,0.9585373997688293],[1.8723340034484863,0.954880952835083],[1.8849000930786133,0.9510736465454102],[1.8974660634994507,0.9471162557601929],[1.910032033920288,0.9430092573165894],[1.9225980043411255,0.9387534260749817],[1.935163974761963,0.9343492984771729],[1.9477300643920898,0.9297975897789001],[1.9602960348129272,0.9250991344451904],[1.9728620052337646,0.9202545881271362],[1.9854280948638916,0.9152647256851196],[1.997994065284729,0.9101303815841675],[2.0105600357055664,0.9048522710800171],[2.0231261253356934,0.8994312882423401],[2.035691976547241,0.8938683271408081],[2.048258066177368,0.8881641626358032],[2.060823917388916,0.8823198676109314],[2.073390007019043,0.8763361573219299],[2.08595609664917,0.87021404504776],[2.0985219478607178,0.8639546036720276],[2.1110880374908447,0.8575586676597595],[2.1236541271209717,0.8510273098945618],[2.1362199783325195,0.8443617224693298],[2.1487860679626465,0.837562620639801],[2.1613521575927734,0.8306313157081604],[2.1739180088043213,0.8235689401626587],[2.1864840984344482,0.8163764476776123],[2.199049949645996,0.8090551495552063],[2.211616039276123,0.8016059398651123],[2.22418212890625,0.7940301895141602],[2.236747980117798,0.7863292098045349],[2.249314069747925,0.7785038948059082],[2.2618799209594727,0.7705557942390442],[2.2744460105895996,0.762485921382904],[2.2870121002197266,0.7542955875396729],[2.2995779514312744,0.7459863424301147],[2.3121440410614014,0.7375591397285461],[2.3247101306915283,0.7290154695510864],[2.337275981903076,0.7203568816184998],[2.349842071533203,0.7115843296051025],[2.36240816116333,0.7026994228363037],[2.374974012374878,0.6937037706375122],[2.387540102005005,0.6845983862876892],[2.4001059532165527,0.675385057926178],[2.4126720428466797,0.6660649180412292],[2.4252381324768066,0.656639575958252],[2.4378039836883545,0.6471108198165894],[2.4503700733184814,0.6374796032905579],[2.4629359245300293,0.6277479529380798],[2.4755020141601563,0.617917001247406],[2.488068103790283,0.6079884767532349],[2.500633955001831,0.5979641079902649],[2.513200044631958,0.5878452062606812],[2.525766134262085,0.5776333808898926],[2.538331985473633,0.5673305988311768],[2.5508980751037598,0.5569380521774292],[2.5634641647338867,0.5464575290679932],[2.5760300159454346,0.5358909368515015],[2.5885961055755615,0.5252395272254944],[2.6011619567871094,0.5145053267478943],[2.6137280464172363,0.5036897659301758],[2.6262941360473633,0.49279463291168213],[2.638859987258911,0.4818218946456909],[2.651426076889038,0.4707728624343872],[2.663991928100586,0.4596497118473053],[2.676558017730713,0.44845375418663025],[2.68912410736084,0.4371870160102844],[2.7016899585723877,0.425851434469223],[2.7142560482025146,0.4144483804702759],[2.7268221378326416,0.40297991037368774],[2.7393879890441895,0.3914480209350586],[2.7519540786743164,0.37985411286354065],[2.7645201683044434,0.3682002127170563],[2.777086019515991,0.3564883768558502],[2.789652109146118,0.3447200655937195],[2.802217960357666,0.33289751410484314],[2.814784049987793,0.3210221827030182],[2.82735013961792,0.30909615755081177],[2.8399159908294678,0.2971215546131134],[2.8524820804595947,0.2850998342037201],[2.8650479316711426,0.2730332911014557],[2.8776140213012695,0.2609234154224396],[2.8901801109313965,0.24877233803272247],[2.9027459621429443,0.2365822196006775],[2.9153120517730713,0.22435450553894043],[2.9278781414031982,0.2120913565158844],[2.940443992614746,0.1997949630022049],[2.953010082244873,0.1874667853116989],[2.965576171875,0.17510899901390076],[2.978142023086548,0.16272380948066711],[2.990708112716675,0.15031267702579498],[3.0032739639282227,0.13787806034088135],[3.0158400535583496,0.1254214197397232],[3.0284061431884766,0.11294499039649963],[3.0409719944000244,0.10045095533132553],[3.0535380840301514,0.08794082701206207],[3.066103935241699,0.07541704177856445],[3.078670024871826,0.06288111209869385],[3.091236114501953,0.05033525824546814],[3.103801965713501,0.037781693041324615],[3.116368055343628,0.025221923366189003],[3.128934144973755,0.01265817042440176],[3.1414999961853027,9.26574066397734e-5],[3.1540660858154297,-0.012473109178245068],[3.1666321754455566,-0.025036904960870743],[3.1791980266571045,-0.037596508860588074],[3.1917641162872314,-0.050150416791439056],[3.2043299674987793,-0.06269616633653641],[3.2168960571289063,-0.07523225247859955],[3.229462146759033,-0.08775646239519119],[3.242027997970581,-0.10026657581329346],[3.254594087600708,-0.11276109516620636],[3.267159938812256,-0.1252375692129135],[3.279726028442383,-0.13769450783729553],[3.2922921180725098,-0.15012970566749573],[3.3048579692840576,-0.1625409573316574],[3.3174240589141846,-0.1749267876148224],[3.3299901485443115,-0.18728499114513397],[3.3425559997558594,-0.19961337745189667],[3.3551220893859863,-0.21191048622131348],[3.3676881790161133,-0.2241741418838501],[3.380254030227661,-0.23640215396881104],[3.392820119857788,-0.24859307706356049],[3.405385971069336,-0.26074451208114624],[3.417952060699463,-0.2728550136089325],[3.43051815032959,-0.28492242097854614],[3.4430840015411377,-0.29694461822509766],[3.4556500911712646,-0.30892014503479004],[3.4682159423828125,-0.32084667682647705],[3.4807820320129395,-0.3327227532863617],[3.4933481216430664,-0.3445463180541992],[3.5059139728546143,-0.3563152551651001],[3.518480062484741,-0.3680281341075897],[3.531046152114868,-0.37968289852142334],[3.543612003326416,-0.3912774920463562],[3.556178092956543,-0.4028105139732361],[3.56874418258667,-0.4142799377441406],[3.5813100337982178,-0.42568373680114746],[3.5938761234283447,-0.43702054023742676],[3.6064419746398926,-0.44828811287879944],[3.6190080642700195,-0.45948511362075806],[3.6315741539001465,-0.470609575510025],[3.6441400051116943,-0.48165950179100037],[3.6567060947418213,-0.492633581161499],[3.669271945953369,-0.5035296678543091],[3.681838035583496,-0.5143464207649231],[3.694404125213623,-0.525081992149353],[3.706969976425171,-0.5357344746589661],[3.719536066055298,-0.5463024973869324],[3.732102155685425,-0.5567843317985535],[3.7446680068969727,-0.5671780109405518],[3.7572340965270996,-0.5774823427200317],[3.7698001861572266,-0.5876954197883606],[3.7823660373687744,-0.5978155732154846],[3.7949321269989014,-0.6078415513038635],[3.807497978210449,-0.6177712678909302],[3.820064067840576,-0.6276037096977234],[3.832630157470703,-0.6373370289802551],[3.845196008682251,-0.6469694972038269],[3.857762098312378,-0.656499981880188],[3.870327949523926,-0.6659266948699951],[3.8828940391540527,-0.675248384475708],[3.8954601287841797,-0.6844634413719177],[3.9080259799957275,-0.6935702562332153],[3.9205920696258545,-0.7025677561759949],[3.9331581592559814,-0.7114542722702026],[3.9457240104675293,-0.7202283143997192],[3.9582901000976563,-0.728888750076294],[3.970856189727783,-0.7374341487884521],[3.983422040939331,-0.7458629012107849],[3.995988130569458,-0.7541740536689758],[4.008553981781006,-0.762365996837616],[4.021120071411133,-0.7704376578330994],[4.03368616104126,-0.778387725353241],[4.046252250671387,-0.7862148284912109],[4.0588178634643555,-0.7939175367355347],[4.071383953094482,-0.8014951348304749],[4.083950042724609,-0.8089461922645569],[4.096516132354736,-0.8162695169448853],[4.109082221984863,-0.8234639763832092],[4.121647834777832,-0.8305280804634094],[4.134213924407959,-0.8374613523483276],[4.146780014038086,-0.844262421131134],[4.159346103668213,-0.8509300947189331],[4.17191219329834,-0.8574634790420532],[4.184478282928467,-0.8638613820075989],[4.1970438957214355,-0.8701227307319641],[4.2096099853515625,-0.8762468695640564],[4.2221760749816895,-0.882232666015625],[4.234742164611816,-0.8880791068077087],[4.247308254241943,-0.8937853574752808],[4.259873867034912,-0.8993502855300903],[4.272439956665039,-0.9047733545303345],[4.285006046295166,-0.9100536108016968],[4.297572135925293,-0.9151901602745056],[4.31013822555542,-0.9201821684837341],[4.322704315185547,-0.925028920173645],[4.335269927978516,-0.9297294020652771],[4.347836017608643,-0.9342832565307617],[4.3604021072387695,-0.9386895895004272],[4.3729681968688965,-0.9429476857185364],[4.385534286499023,-0.9470568895339966],[4.398099899291992,-0.951016366481781],[4.410665988922119,-0.9548258781433105],[4.423232078552246,-0.9584846496582031],[4.435798168182373,-0.9619920253753662],[4.4483642578125,-0.9653474688529968],[4.460929870605469,-0.9685503840446472],[4.473495960235596,-0.9716005325317383],[4.486062049865723,-0.9744971990585327],[4.49862813949585,-0.9772400259971619],[4.511194229125977,-0.9798285365104675],[4.523759841918945,-0.9822621941566467],[4.536325931549072,-0.9845408797264099],[4.548892021179199,-0.9866641163825989],[4.561458110809326,-0.988631546497345],[4.574024200439453,-0.9904428720474243],[4.58659029006958,-0.992097795009613],[4.599155902862549,-0.9935959577560425],[4.611721992492676,-0.9949373602867126],[4.624288082122803,-0.9961216449737549],[4.63685417175293,-0.9971485733985901],[4.649420261383057,-0.9980181455612183],[4.661985874176025,-0.9987300038337708],[4.674551963806152,-0.9992842674255371],[4.687118053436279,-0.9996806979179382],[4.699684143066406,-0.9999192953109741],[4.712250232696533,-1.0],[4.72481632232666,-0.9999227523803711],[4.737381935119629,-0.999687671661377],[4.749948024749756,-0.9992947578430176],[4.762514114379883,-0.998744010925293],[4.77508020401001,-0.9980355501174927],[4.787646293640137,-0.9971694946289063],[4.8002119064331055,-0.996146023273468],[4.812777996063232,-0.9949652552604675],[4.825344085693359,-0.9936273694038391],[4.837910175323486,-0.9921325445175171],[4.850476264953613,-0.9904810786247253],[4.863041877746582,-0.9886732697486877],[4.875607967376709,-0.9867092967033386],[4.888174057006836,-0.9845895767211914],[4.900740146636963,-0.9823142886161804],[4.91330623626709,-0.9798839092254639],[4.925871849060059,-0.9772989749908447],[4.9384379386901855,-0.9745595455169678],[4.9510040283203125,-0.9716662764549255],[4.9635701179504395,-0.9686195254325867],[4.976136207580566,-0.9654198288917542],[4.988702297210693,-0.962067723274231],[5.001267910003662,-0.9585638642311096],[5.013833999633789,-0.9549084305763245],[5.026400089263916,-0.9511023163795471],[5.038966178894043,-0.947145938873291],[5.05153226852417,-0.9430400133132935],[5.064097881317139,-0.9387853741645813],[5.076663970947266,-0.9343823194503784],[5.089230060577393,-0.9298316836357117],[5.1017961502075195,-0.9251343011856079],[5.1143622398376465,-0.9202907681465149],[5.126928329467773,-0.9153019785881042],[5.139493942260742,-0.9101687669754028],[5.152060031890869,-0.9048917293548584],[5.164626121520996,-0.8994717597961426],[5.177192211151123,-0.8939098119735718],[5.18975830078125,-0.8882066607475281],[5.202323913574219,-0.882363498210907],[5.214890003204346,-0.8763807415962219],[5.227456092834473,-0.8702596426010132],[5.2400221824646,-0.8640011548995972],[5.252588272094727,-0.8576061725616455],[5.265153884887695,-0.851076066493988],[5.277719974517822,-0.844411313533783],[5.290286064147949,-0.8376132249832153],[5.302852153778076,-0.8306828737258911],[5.315418243408203,-0.823621392250061],[5.327983856201172,-0.8164300918579102],[5.340549945831299,-0.809109628200531],[5.353116035461426,-0.8016613721847534],[5.365682125091553,-0.7940865159034729],[5.37824821472168,-0.7863863110542297],[5.390814304351807,-0.7785618901252747],[5.403379917144775,-0.7706148624420166],[5.415946006774902,-0.7625458836555481],[5.428512096405029,-0.7543564438819885],[5.441078186035156,-0.7460479140281677],[5.453644275665283,-0.737621545791626],[5.466209888458252,-0.7290790677070618],[5.478775978088379,-0.7204211354255676],[5.491342067718506,-0.7116494178771973],[5.503908157348633,-0.7027653455734253],[5.51647424697876,-0.6937702894210815],[5.529040336608887,-0.6846657395362854],[5.5416059494018555,-0.6754533648490906],[5.554172039031982,-0.6661339998245239],[5.566738128662109,-0.6567094922065735],[5.579304218292236,-0.6471812725067139],[5.591870307922363,-0.6375508308410645],[5.604435920715332,-0.6278200745582581],[5.617002010345459,-0.6179898381233215],[5.629568099975586,-0.6080620288848877],[5.642134189605713,-0.5980381965637207],[5.65470027923584,-0.5879199504852295],[5.667265892028809,-0.5777092576026917],[5.6798319816589355,-0.5674068927764893],[5.6923980712890625,-0.5570150017738342],[5.7049641609191895,-0.5465351343154907],[5.717530250549316,-0.5359689593315125],[5.730095863342285,-0.5253185629844666],[5.742661952972412,-0.5145847797393799],[5.755228042602539,-0.5037698149681091],[5.767794132232666,-0.49287524819374084],[5.780360221862793,-0.4819028675556183],[5.79292631149292,-0.47085440158843994],[5.805491924285889,-0.4597319960594177],[5.818058013916016,-0.44853657484054565],[5.830624103546143,-0.4372703433036804],[5.8431901931762695,-0.4259350299835205],[5.8557562828063965,-0.41453251242637634],[5.868321895599365,-0.40306493639945984],[5.880887985229492,-0.3915332853794098],[5.893454074859619,-0.37993982434272766],[5.906020164489746,-0.3682863414287567],[5.918586254119873,-0.35657474398612976],[5.93115234375,-0.34480682015419006],[5.943717956542969,-0.33298489451408386],[5.956284046173096,-0.32110995054244995],[5.968850135803223,-0.3091842830181122],[5.98141622543335,-0.29720979928970337],[5.993982315063477,-0.2851884067058563],[6.006547927856445,-0.2731224298477173],[6.019114017486572,-0.26101285219192505],[6.031680107116699,-0.24886208772659302],[6.044246196746826,-0.23667201399803162],[6.056812286376953,-0.22444456815719604],[6.069377899169922,-0.2121821492910385],[6.081943988800049,-0.199885755777359],[6.094510078430176,-0.18755780160427094],[6.107076168060303,-0.1752002239227295],[6.11964225769043,-0.16281498968601227],[6.132207870483398,-0.15040452778339386],[6.144773960113525,-0.13796983659267426],[6.157340049743652,-0.12551334500312805],[6.169906139373779,-0.11303705722093582],[6.182472229003906,-0.10054291039705276],[6.195038318634033,-0.08803288638591766],[6.207603931427002,-0.0755094364285469],[6.220170021057129,-0.06297358870506287],[6.232736110687256,-0.05042779818177223],[6.245302200317383,-0.037874046713113785],[6.25786828994751,-0.025314312428236008],[6.2704339027404785,-0.012751058675348759],[6.2829999923706055,-1.853148132795468e-4],[6.295566082000732,0.012380458414554596],[6.308132171630859,0.024944277480244637],[6.320698261260986,0.037504155188798904],[6.333264350891113,0.050058115273714066],[6.345829963684082,0.06260368973016739],[6.358396053314209,0.0751398578286171],[6.370962142944336,0.0876641646027565],[6.383528232574463,0.10017462074756622],[6.39609432220459,0.11266926676034927],[6.408659934997559,0.12514564394950867],[6.4212260246276855,0.13760273158550262],[6.4337921142578125,0.15003809332847595],[6.4463582038879395,0.16244976222515106],[6.458924293518066,0.17483578622341156],[6.471489906311035,0.18719373643398285],[6.484055995941162,0.19952258467674255],[6.496622085571289,0.21181993186473846],[6.509188175201416,0.22408384084701538],[6.521754264831543,0.2363123595714569],[6.534319877624512,0.24850310385227203],[6.546885967254639,0.26065507531166077],[6.559452056884766,0.2727658748626709],[6.572018146514893,0.2848336100578308],[6.5845842361450195,0.2968563735485077],[6.5971503257751465,0.3088322579860687],[6.609715938568115,0.3207589089870453],[6.622282028198242,0.33263537287712097],[6.634848117828369,0.34445932507514954],[6.647414207458496,0.35622888803482056],[6.659980297088623,0.3679421842098236],[6.672545909881592,0.3795969486236572],[6.685111999511719,0.391192227602005],[6.697678089141846,0.4027257263660431],[6.710244178771973,0.41419562697410583],[6.7228102684021,0.4256001114845276],[6.735376358032227,0.4369374215602875],[6.747941970825195,0.44820529222488403],[6.760508060455322,0.45940282940864563],[6.773074150085449,0.4705277979373932],[6.785640239715576,0.4815784990787506],[6.798206329345703,0.49255314469337463],[6.810771942138672,0.5034496188163757],[6.823338031768799,0.5142669677734375],[6.835904121398926,0.5250031352043152],[6.848470211029053,0.5356563925743103],[6.86103630065918,0.5462251305580139],[6.873601913452148,0.5567071437835693],[6.886168003082275,0.5671016573905945],[6.898734092712402,0.577406644821167],[6.911300182342529,0.5876204967498779],[6.923866271972656,0.5977414846420288],[6.936431884765625,0.6077677607536316],[6.948997974395752,0.6176984310150146],[6.961564064025879,0.6275315880775452],[6.974130153656006,0.6372656226158142],[6.986696243286133,0.6468990445137024],[6.99926233291626,0.6564303040504456],[7.0118279457092285,0.6658575534820557],[7.0243940353393555,0.6751800179481506],[7.036960124969482,0.6843959093093872],[7.049526214599609,0.6935036778450012],[7.062092304229736,0.7025019526481628],[7.074657917022705,0.7113890051841736],[7.087224006652832,0.7201640009880066],[7.099790096282959,0.7288253307342529],[7.112356185913086,0.737371563911438],[7.124922275543213,0.7458013296127319],[7.13748836517334,0.7541133761405945],[7.150053977966309,0.7623060345649719],[7.1626200675964355,0.770378589630127],[7.1751861572265625,0.7783295512199402],[7.1877522468566895,0.7861576080322266],[7.200318336486816,0.7938615083694458],[7.212883949279785,0.8014397621154785],[7.225450038909912,0.8088917136192322],[7.238016128540039,0.816215991973877],[7.250582218170166,0.8234114050865173],[7.263148307800293,0.8304767608642578],[7.275713920593262,0.8374107480049133],[7.288280010223389,0.8442127108573914],[7.300846099853516,0.8508814573287964],[7.313412189483643,0.8574157953262329],[7.3259782791137695,0.8638147115707397],[7.338543891906738,0.8700770139694214],[7.351109981536865,0.8762022256851196],[7.363676071166992,0.8821890354156494],[7.376242160797119,0.8880365490913391],[7.388808250427246,0.8937438130378723],[7.401374340057373,0.8993099331855774],[7.413939952850342,0.9047338962554932],[7.426506042480469,0.9100152254104614],[7.439072132110596,0.9151527881622314],[7.451638221740723,0.9201458692550659],[7.46420431137085,0.9249936938285828],[7.476769924163818,0.9296952486038208],[7.489336013793945,0.9342501759529114],[7.501902103424072,0.9386576414108276],[7.514468193054199,0.9429168105125427],[7.527034282684326,0.9470271468162537],[7.539600372314453,0.9509878754615784],[7.552165985107422,0.9547983407974243],[7.564732074737549,0.9584581851959229],[7.577298164367676,0.9619666934013367],[7.589864253997803,0.965323269367218],[7.60243034362793,0.9685274362564087],[7.614995956420898,0.9715785980224609],[7.627562046051025,0.9744763970375061],[7.640128135681152,0.977220356464386],[7.652694225311279,0.9798099994659424],[7.665260314941406,0.9822449088096619],[7.677825927734375,0.984524667263031],[7.690392017364502,0.9866490364074707],[7.702958106994629,0.9886175990104675],[7.715524196624756,0.9904300570487976],[7.728090286254883,0.9920861721038818],[7.740655899047852,0.9935855269432068],[7.7532219886779785,0.9949280619621277],[7.7657880783081055,0.9961134791374207],[7.778354167938232,0.9971415996551514],[7.790920257568359,0.9980123043060303],[7.803486347198486,0.9987253546714783],[7.816051959991455,0.9992807507514954],[7.828618049621582,0.999678373336792],[7.841184139251709,0.9999181032180786],[7.853750228881836,1.0],[7.866316318511963,0.9999239444732666],[7.878881931304932,0.9996899962425232],[7.891448020935059,0.9992982149124146],[7.9040141105651855,0.9987486600875854],[7.9165802001953125,0.9980413317680359],[7.9291462898254395,0.997176468372345],[7.941712379455566,0.9961541295051575],[7.954277992248535,0.9949745535850525],[7.966844081878662,0.9936378002166748],[7.979410171508789,0.9921441674232483],[7.991976261138916,0.9904938340187073],[8.004542350769043,0.9886871576309204],[8.017107963562012,0.9867243766784668],[8.029674530029297,0.9846056699752808],[8.042240142822266,0.9823316335678101],[8.054805755615234,0.9799025058746338],[8.06737232208252,0.9773184657096863],[8.079937934875488,0.9745802879333496],[8.092504501342773,0.9716880321502686],[8.105070114135742,0.96864253282547],[8.117635726928711,0.9654441475868225],[8.130202293395996,0.9620929956436157],[8.142767906188965,0.9585902094841003],[8.15533447265625,0.9549358487129211],[8.167900085449219,0.9511309266090393],[8.180465698242188,0.9471758008003235],[8.193032264709473,0.9430708289146423],[8.205597877502441,0.9388172626495361],[8.218164443969727,0.9344151616096497],[8.230730056762695,0.9298657774925232],[8.243295669555664,0.9251696467399597],[8.25586223602295,0.9203270077705383],[8.268427848815918,0.915339469909668],[8.280994415283203,0.9102069735527039],[8.293560028076172,0.9049311876296997],[8.306126594543457,0.8995120525360107],[8.318692207336426,0.8939512968063354],[8.331257820129395,0.8882494568824768],[8.34382438659668,0.8824068307876587],[8.356389999389648,0.8764253854751587],[8.368956565856934,0.870305061340332],[8.381522178649902,0.8640478253364563],[8.394087791442871,0.8576540946960449],[8.406654357910156,0.8511244654655457],[8.419219970703125,0.8444609642028809],[8.43178653717041,0.8376635909080505],[8.444352149963379,0.8307344913482666],[8.456917762756348,0.823674201965332],[8.469484329223633,0.8164833188056946],[8.482049942016602,0.8091640472412109],[8.494616508483887,0.8017164468765259],[8.507182121276855,0.7941428422927856],[8.519747734069824,0.786443829536438],[8.53231430053711,0.7786200642585754],[8.544879913330078,0.770673930644989],[8.557446479797363,0.7626054883003235],[8.570012092590332,0.7544172406196594],[8.5825777053833,0.7461099028587341],[8.595144271850586,0.7376841306686401],[8.607709884643555,0.7291424870491028],[8.62027645111084,0.7204850316047668],[8.632842063903809,0.711714506149292],[8.645408630371094,0.7028309106826782],[8.657974243164063,0.69383704662323],[8.670539855957031,0.6847336292266846],[8.683106422424316,0.6755213737487793],[8.695672035217285,0.6662031412124634],[8.70823860168457,0.6567789912223816],[8.720804214477539,0.6472519040107727],[8.733369827270508,0.637622594833374],[8.745936393737793,0.6278918385505676],[8.758502006530762,0.6180626749992371],[8.771068572998047,0.6081352233886719],[8.783634185791016,0.5981124639511108],[8.796199798583984,0.5879952907562256],[8.80876636505127,0.5777844786643982],[8.821331977844238,0.5674831867218018],[8.833898544311523,0.5570915341377258],[8.846464157104492,0.5466127395629883],[8.859029769897461,0.5360475778579712],[8.871596336364746,0.525397002696991],[8.884161949157715,0.5146642327308655],[8.896728515625,0.503849446773529],[8.909294128417969,0.49295586347579956],[8.921859741210938,0.4819844663143158],[8.934426307678223,0.470936119556427],[8.946991920471191,0.45981428027153015],[8.959558486938477,0.44861894845962524],[8.972124099731445,0.4373536705970764],[8.984689712524414,0.4260193109512329],[8.9972562789917,0.41461682319641113],[9.009821891784668,0.40314972400665283],[9.022388458251953,0.39161810278892517],[9.034954071044922,0.3800255358219147],[9.04751968383789,0.36837294697761536],[9.060086250305176,0.35666128993034363],[9.072651863098145,0.3448942303657532],[9.08521842956543,0.3330717980861664],[9.097784042358398,0.3211976885795593],[9.110350608825684,0.3092719614505768],[9.122916221618652,0.29729828238487244],[9.135481834411621,0.28527766466140747],[9.148048400878906,0.2732110917568207],[9.160614013671875,0.2611023187637329],[9.17318058013916,0.24895136058330536],[9.185746192932129,0.23676203191280365],[9.198311805725098,0.22453531622886658],[9.210878372192383,0.21227222681045532],[9.223443984985352,0.19997653365135193],[9.236010551452637,0.18764834105968475],[9.248576164245605,0.17529144883155823],[9.261141777038574,0.16290688514709473],[9.27370834350586,0.15049564838409424],[9.286273956298828,0.13806159794330597],[9.298840522766113,0.1256048083305359],[9.311406135559082,0.11312911659479141],[9.32397174835205,0.10063556581735611],[9.336538314819336,0.08812518417835236],[9.349103927612305,0.07560183107852936],[9.36167049407959,0.06306558847427368],[9.374236106872559,0.050520338118076324],[9.386801719665527,0.03796711191534996],[9.399368286132813,0.025406939908862114],[9.411933898925781,0.012843708507716656],[9.424500465393066,2.7749536093324423e-4],[9.437066078186035,-0.012287808582186699],[9.44963264465332,-0.024852124974131584],[9.462198257446289,-0.037411563098430634],[9.474763870239258,-0.04996509477496147],[9.487330436706543,-0.06251168996095657],[9.499896049499512,-0.07504746317863464],[9.512462615966797,-0.08757233619689941],[9.525028228759766,-0.10008243471384048],[9.537593841552734,-0.11257672309875488],[9.55016040802002,-0.12505418062210083],[9.562726020812988,-0.13751095533370972],[9.575292587280273,-0.14994695782661438],[9.587858200073242,-0.1623583436012268],[9.600423812866211,-0.17474408447742462],[9.612990379333496,-0.18710318207740784],[9.625555992126465,-0.19943179190158844],[9.63812255859375,-0.21172985434532166],[9.650688171386719,-0.22399353981018066],[9.663253784179688,-0.23622186481952667],[9.675820350646973,-0.2484138160943985],[9.688385963439941,-0.2605656087398529],[9.700952529907227,-0.2726771831512451],[9.713518142700195,-0.2847447991371155],[9.726083755493164,-0.2967674136161804],[9.73865032196045,-0.3087441325187683],[9.751215934753418,-0.3206711411476135],[9.763782501220703,-0.33254843950271606],[9.776348114013672,-0.34437233209609985],[9.78891372680664,-0.3561418652534485],[9.801480293273926,-0.3678560256958008],[9.814045906066895,-0.3795112371444702],[9.82661247253418,-0.39110738039016724],[9.839178085327148,-0.4026409089565277],[9.851743698120117,-0.41411083936691284],[9.864310264587402,-0.425516277551651],[9.876875877380371,-0.43685364723205566],[9.889442443847656,-0.44812288880348206],[9.902008056640625,-0.4593205153942108],[9.91457462310791,-0.47044646739959717],[9.927140235900879,-0.48149728775024414],[9.939705848693848,-0.4924720823764801],[9.952272415161133,-0.503369927406311],[9.964838027954102,-0.5141875147819519],[9.977404594421387,-0.5249246954917908],[9.989970207214355,-0.535578191280365],[10.002535820007324,-0.5461471080780029],[10.01510238647461,-0.556630551815033],[10.027667999267578,-0.567025363445282],[10.040234565734863,-0.5773314237594604],[10.052800178527832,-0.5875455141067505],[10.0653657913208,-0.59766685962677],[10.077932357788086,-0.6076945662498474],[10.090497970581055,-0.6176255345344543],[10.10306453704834,-0.6274597644805908],[10.115630149841309,-0.6371942162513733],[10.128195762634277,-0.6468279957771301],[10.140762329101563,-0.656360387802124],[10.153327941894531,-0.6657884120941162],[10.165894508361816,-0.6751120090484619],[10.178460121154785,-0.6843283176422119],[10.191025733947754,-0.6934365630149841],[10.203592300415039,-0.7024360299110413],[10.216157913208008,-0.7113238573074341],[10.228724479675293,-0.7201000452041626],[10.241290092468262,-0.7287619113922119],[10.253856658935547,-0.7373092770576477],[10.266422271728516,-0.7457396388053894],[10.278987884521484,-0.7540522217750549],[10.29155445098877,-0.7622463703155518],[10.304120063781738,-0.7703195214271545],[10.316686630249023,-0.7782716751098633],[10.329252243041992,-0.7861003279685974],[10.341817855834961,-0.7938048243522644],[10.354384422302246,-0.8013846278190613],[10.366950035095215,-0.8088372349739075],[10.3795166015625,-0.8161627650260925],[10.392082214355469,-0.8233588337898254],[10.404647827148438,-0.8304249048233032],[10.417214393615723,-0.8373603224754333],[10.429780006408691,-0.8441630601882935],[10.442346572875977,-0.850832998752594],[10.454912185668945,-0.8573681116104126],[10.467477798461914,-0.8637678027153015],[10.4800443649292,-0.8700315952301025],[10.492609977722168,-0.8761575222015381],[10.505176544189453,-0.8821455836296082],[10.517742156982422,-0.8879939317703247],[10.53030776977539,-0.8937020301818848],[10.542874336242676,-0.8992694616317749],[10.555439949035645,-0.9046944379806519],[10.56800651550293,-0.9099769592285156],[10.580572128295898,-0.915115475654602],[10.593137741088867,-0.9201094508171082],[10.605704307556152,-0.9249584674835205],[10.618269920349121,-0.9296611547470093],[10.630836486816406,-0.9342173337936401],[10.643402099609375,-0.9386256337165833],[10.655967712402344,-0.9428858160972595],[10.668534278869629,-0.946997344493866],[10.681099891662598,-0.9509590864181519],[10.693666458129883,-0.9547709226608276],[10.706232070922852,-0.9584317803382874],[10.718798637390137,-0.9619414806365967],[10.731364250183105,-0.9652990698814392],[10.743929862976074,-0.9685042500495911],[10.75649642944336,-0.9715567827224731],[10.769062042236328,-0.9744555950164795],[10.781628608703613,-0.9772008061408997],[10.794194221496582,-0.9797914624214172],[10.80675983428955,-0.9822274446487427],[10.819326400756836,-0.9845085144042969],[10.831892013549805,-0.9866339564323425],[10.84445858001709,-0.9886037111282349],[10.857024192810059,-0.9904173016548157],[10.869589805603027,-0.9920744299888611],[10.882156372070313,-0.9935750961303711],[10.894721984863281,-0.994918704032898],[10.907288551330566,-0.9961053729057312],[10.919854164123535,-0.9971346259117126],[10.932419776916504,-0.9980064034461975],[10.944986343383789,-0.9987207055091858],[10.957551956176758,-0.9992772340774536],[10.970118522644043,-0.9996760487556458],[10.982684135437012,-0.9999169111251831],[10.99524974822998,-0.9999999403953552],[11.007816314697266,-0.9999250769615173],[11.020381927490234,-0.9996923208236694],[11.03294849395752,-0.9993016719818115],[11.045514106750488,-0.9987532496452332],[11.058080673217773,-0.9980471134185791],[11.070646286010742,-0.9971834421157837],[11.083211898803711,-0.9961622953414917],[11.095778465270996,-0.9949837327003479],[11.108344078063965,-0.9936482310295105],[11.12091064453125,-0.9921556711196899],[11.133476257324219,-0.9905065894126892],[11.146041870117188,-0.9887011051177979],[11.158608436584473,-0.9867393374443054],[11.171174049377441,-0.9846219420433044],[11.183740615844727,-0.9823489189147949],[11.196306228637695,-0.9799209237098694],[11.208871841430664,-0.9773381948471069],[11.22143840789795,-0.9746009707450867],[11.234004020690918,-0.9717100262641907],[11.246570587158203,-0.9686654806137085],[11.259136199951172,-0.965468168258667],[11.27170181274414,-0.96211838722229],[11.284268379211426,-0.9586164951324463],[11.296833992004395,-0.9549634456634521],[11.30940055847168,-0.9511593580245972],[11.321966171264648,-0.9472053647041321],[11.334531784057617,-0.9431018233299255],[11.347098350524902,-0.9388490319252014],[11.359663963317871,-0.9344483017921448],[11.372230529785156,-0.9298996925354004],[11.384796142578125,-0.9252046346664429],[11.397361755371094,-0.9203634262084961],[11.409928321838379,-0.915376603603363],[11.422493934631348,-0.9102455377578735],[11.435060501098633,-0.9049704074859619],[11.447626113891602,-0.8995527625083923],[11.46019172668457,-0.8939930200576782],[11.472758293151855,-0.8882917761802673],[11.485323905944824,-0.8824506402015686],[11.49789047241211,-0.8764697909355164],[11.510456085205078,-0.8703509569168091],[11.523022651672363,-0.8640941977500916],[11.535588264465332,-0.8577014803886414],[11.5481538772583,-0.8511733412742615],[11.560720443725586,-0.8445103168487549],[11.573286056518555,-0.8377144932746887],[11.58585262298584,-0.8307858109474182],[11.598418235778809,-0.8237264752388],[11.610983848571777,-0.816537082195282],[11.623550415039063,-0.8092182278633118],[11.636116027832031,-0.8017721176147461],[11.648682594299316,-0.7941988706588745],[11.661248207092285,-0.7865007519721985],[11.673813819885254,-0.7786784768104553],[11.686380386352539,-0.7707326412200928],[11.698945999145508,-0.7626657485961914],[11.711512565612793,-0.7544777393341064],[11.724078178405762,-0.7461712956428528],[11.73664379119873,-0.7377469539642334],[11.749210357666016,-0.7292055487632751],[11.761775970458984,-0.7205496430397034],[11.77434253692627,-0.7117792367935181],[11.786908149719238,-0.7028971910476685],[11.799473762512207,-0.6939041018486023],[11.812040328979492,-0.6848008036613464],[11.824605941772461,-0.6755900382995605],[11.837172508239746,-0.6662718653678894],[11.849738121032715,-0.656849205493927],[11.8623046875,-0.6473221182823181],[11.874870300292969,-0.6376935839653015],[11.887435913085938,-0.6279643177986145],[11.900002479553223,-0.6181351542472839],[11.912568092346191,-0.6082091331481934],[11.925134658813477,-0.5981863141059875],[11.937700271606445,-0.5880698561668396],[11.950265884399414,-0.5778604745864868],[11.9628324508667,-0.5675591230392456],[11.975398063659668,-0.5571689009666443],[11.987964630126953,-0.5466899275779724],[12.000530242919922,-0.5361254215240479],[12.01309585571289,-0.5254762172698975],[12.025662422180176,-0.5147432684898376],[12.038228034973145,-0.503929853439331],[12.05079460144043,-0.49303606152534485],[12.063360214233398,-0.48206523060798645],[12.075925827026367,-0.4710182845592499],[12.088492393493652,-0.45989611744880676],[12.101058006286621,-0.4487021863460541],[12.113624572753906,-0.4374365508556366],[12.126190185546875,-0.4261026978492737],[12.138755798339844,-0.41470158100128174],[12.151322364807129,-0.4032340943813324],[12.163887977600098,-0.3917038142681122],[12.176454544067383,-0.38011080026626587],[12.189020156860352,-0.36845862865448],[12.20158576965332,-0.3567483127117157],[12.214152336120605,-0.34498074650764465],[12.226717948913574,-0.3331596255302429],[12.23928451538086,-0.3212849795818329],[12.251850128173828,-0.3093605041503906],[12.264415740966797,-0.2973872125148773],[12.276982307434082,-0.285366028547287],[12.28954792022705,-0.2733006775379181],[12.302114486694336,-0.2611912786960602],[12.314680099487305,-0.2490415722131729],[12.32724666595459,-0.23685158789157867],[12.339812278747559,-0.2246251404285431],[12.352377891540527,-0.21236322820186615],[12.364944458007813,-0.20006684958934784],[12.377510070800781,-0.18773981928825378],[12.390076637268066,-0.17538221180438995],[12.402642250061035,-0.16299782693386078],[12.415207862854004,-0.15058772265911102],[12.427774429321289,-0.13815289735794067],[12.440340042114258,-0.12569719552993774],[12.452906608581543,-0.1132207065820694],[12.465472221374512,-0.10072728246450424],[12.47803783416748,-0.08821795135736465],[12.490604400634766,-0.07569374144077301],[12.503170013427734,-0.0631585344672203],[12.51573657989502,-0.050612401217222214],[12.528302192687988,-0.03805922716856003],[12.540867805480957,-0.025500044226646423],[12.553434371948242,-0.01293588150292635]]}' id=\"73d5de1e-d05a-4e03-94e1-1d195709c70b}\" />\n"}],"id":"53b172e6-39c9-496d-a248-2fc20ee09ad3","content":["# jump through some hoops to render the tensor as a chart\r\nx = t_sin_x |> Nx.to_flat_list()\r\ny = t_sin_y |> Nx.to_flat_list()\r\nsine_wave = Enum.zip(x, y) |> Enum.map(fn {x,y} -> [x, y] end)\r\nNiex.Content.chart(\"LineChart\", sine_wave, points: false)"],"cell_type":"code"},{"prompt_number":null,"outputs":[{"text":""}],"id":"f2bb6324-7a34-4927-9374-b09f4a6ddf2e","content":["Element-wise binary ops\r\n\r\n```\r\n:add, :subtract, :multiply, :divide, :max, :min, :remainder, :atan2, :power,\r\n:bitwise_and, :bitwise_or, :bitwise_xor,\r\n:left_shift, :right_shift_arithmetic, :right_shift_logical,\r\n:equal, :not_equal, :greater, :less, :greater_equal, :less_equal,\r\n```"],"cell_type":"markdown"},{"running":false,"prompt_number":14,"outputs":[{"type":"code","text":["#Nx.Tensor<\n  s64[2][3]\n  [\n    [2, 4, 6],\n    [8, 10, 12]\n  ]\n>"]}],"id":"5b8a4be7-31eb-4b0c-b3da-bfe974377ed8","content":["a = Nx.tensor([[1,2,3], [4,5,6]])\r\nb = Nx.tensor([[1,2,3], [4,5,6]])\r\nNx.add(a,b)"],"cell_type":"code"},{"prompt_number":null,"outputs":[{"text":""}],"id":"ca80ed3b-da74-4c35-97af-4802ccc58f0b","content":["Aggregate ops\r\n\r\n```\r\nconv, all?, any?, sum, product, reduce_max, reduce_min, argmax, argmin, reduce, \r\nreduce_window, window_sum, window_product, window_max, window_min, map, sort,\r\nscatter_window_max, scatter_window_min\r\n```"],"cell_type":"markdown"},{"running":false,"prompt_number":15,"outputs":[{"type":"code","text":["#Nx.Tensor<\n  s64\n  21\n>"]}],"id":"fc2cb1e9-c37f-487e-a99a-6efac831fb2e","content":["Nx.tensor([[1,2,3], [4,5,6]]) |> Nx.sum"],"cell_type":"code"},{"running":false,"prompt_number":16,"outputs":[{"type":"code","text":["#Nx.Tensor<\n  s64[3]\n  [5, 7, 9]\n>"]}],"id":"e62421d6-a7cc-43c5-b85a-a27b966b27d4","content":["Nx.tensor([[1,2,3], [4,5,6]]) |> Nx.sum(axes: [0])"],"cell_type":"code"},{"running":false,"prompt_number":17,"outputs":[{"type":"code","text":["#Nx.Tensor<\n  s64[2]\n  [6, 15]\n>"]}],"id":"a49bdbf6-81d3-4615-8c64-18e1d463d2ac","content":["Nx.tensor([[1,2,3], [4,5,6]]) |> Nx.sum(axes: [1])"],"cell_type":"code"},{"prompt_number":null,"outputs":[{"text":""}],"id":"ab91ee25-b922-4d5c-b949-98d819e1453c","content":["Other\r\n\r\n```\r\ndot, clip, slice, concatenate, select\r\n```"],"cell_type":"markdown"},{"running":false,"prompt_number":18,"outputs":[{"type":"code","text":["#Nx.Tensor<\n  s64[2][2]\n  [\n    [5, 11],\n    [11, 25]\n  ]\n>"]}],"id":"ff6c2290-4918-478b-879b-da7fd7fd85c1","content":["tt = Nx.tensor([[1,2],[3,4]])\r\nNx.dot(tt, [1], tt, [1])"],"cell_type":"code"},{"running":false,"prompt_number":19,"outputs":[{"type":"code","text":["#Nx.Tensor<\n  s64[2][2]\n  [\n    [5, 6],\n    [7, 8]\n  ]\n>"]}],"id":"e40e771b-9083-4650-b664-bba13b71e1f3","content":["ta = Nx.tensor([[1,6],[3,8]])\r\ntb = Nx.tensor([[5,2],[7,4]])\r\ncmp = Nx.greater_equal(ta,tb)\r\nNx.select(cmp,ta,tb)"],"cell_type":"code"},{"prompt_number":null,"outputs":[{"text":""}],"id":"47a5de5d-d090-4fef-99d9-0cf3a60a1d5f","content":["---"],"cell_type":"markdown"},{"prompt_number":null,"outputs":[{"text":""}],"id":"3fb52d38-0ecf-4df1-877e-3eca6af3ba0d","content":["## BEAM numerical computation performance\r\n\r\n\r\n - Q: Why don't people use Erlang to forecast the weather?\r\n - A (Robert Virding): Because you would get tomorrow's forecast next week\r\n\r\nWhile the BEAM has fantastic concurrency and IO throughput, its interpreted nature (even with upcoming JIT compilation), dynamic type system, and lack of SIMD instructions limits raw computational performance."],"cell_type":"markdown"},{"prompt_number":null,"outputs":[{"text":""}],"id":"f59f486c-3094-4673-bdb4-e481dea01399","content":["## `defn` - Numerical Definitions\r\nNx introduces `defn` (Numerical Definitions) - a construct to develop numerical code in a large subset of the Elixir language\r\n - Numerical definitions provide a set of infix operators that delegate to the tensor-aware `Nx.*` functions\r\n - Nx introduces `Nx.Defn.Kernel` which replaces `Kernel` inside `defn`s\r\n - `defn` definitions compile, either JIT or AOT, into an AST that is further compiled to some backend for execution\r\n\r\n"],"cell_type":"markdown"},{"running":false,"prompt_number":20,"outputs":[{"type":"code","text":["{:module, Formula, <<70, 79, 82, 49, 0, 0, 13, 220, 66, 69, 65, 77, 65, 116, 85, 56, 0, 0, 1, 248, 0, 0, 0, 41, 14, 69, 108, 105, 120, 105, 114, 46, 70, 111, 114, 109, 117, 108, 97, 8, 95, 95, 105, 110, 102, 111, 95, ...>>, {:portion, 1}}"]}],"id":"dc132249-3b1a-4a16-a2aa-df398f0db5e5","content":["defmodule Formula do\r\n  import Nx.Defn  ## so we can use defn\r\n \r\n  defn softmax(t) do\r\n    Nx.exp(t) / Nx.sum(Nx.exp(t))\r\n  end\r\n  \r\n  defn portion(t) do\r\n    t / Nx.sum(t)\r\n  end\r\nend"],"cell_type":"code"},{"running":false,"prompt_number":21,"outputs":[{"type":"code","text":["#Nx.Tensor<\n  f32[4]\n  [0.032058604061603546, 0.08714432269334793, 0.23688282072544098, 0.6439142227172852]\n>"]}],"id":"9b529c15-e49e-4b0e-b16c-a0b3b2ab50fe","content":["[1, 2, 3, 4] |> Nx.tensor |> Formula.softmax"],"cell_type":"code"},{"running":false,"prompt_number":22,"outputs":[{"type":"code","text":["#Nx.Tensor<\n  f32[4]\n  [0.10000000149011612, 0.20000000298023224, 0.30000001192092896, 0.4000000059604645]\n>"]}],"id":"0de0e948-b5bf-43a8-8d22-bec46b06a0fa","content":["[1, 2, 3, 4] |> Nx.tensor |> Formula.portion"],"cell_type":"code"},{"running":false,"prompt_number":23,"outputs":[{"type":"html","text":"<div class=\"chart\" style=\"width: 480px; height: 360px\" phx-hook=\"NiexChart\" data-chart='{\"type\":\"LineChart\",\"options\":{\"width\":480,\"height\":360},\"data\":[[0.0181818176060915,7.801341416779906e-5],[0.036363635212183,2.1206245583016425e-4],[0.05454545468091965,5.764455418102443e-4],[0.072727270424366,0.001566941267810762],[0.09090909361839294,0.00425938842818141],[0.1090909093618393,0.011578218080103397],[0.12727272510528564,0.03147285804152489],[0.145454540848732,0.08555210381746292],[0.16363635659217834,0.23255471885204315],[0.1818181872367859,0.6321492195129395]]}' id=\"432afcac-53c1-456d-860e-28732f7ba6ee}\" />\n"}],"id":"6eb950fa-b0bf-4d61-9075-8619f8f9fa70","content":["t_sm = 1..10 |> Enum.to_list |> Nx.tensor()\r\nsm = t_sm |> Formula.softmax |> Nx.to_flat_list()\r\np = t_sm |> Formula.portion |> Nx.to_flat_list()\r\ndata_sm = Enum.zip(p, sm) |> Enum.map(fn {x,y} -> [x, y] end)\r\nNiex.Content.chart(\"LineChart\", data_sm)\r\n"],"cell_type":"code"},{"prompt_number":null,"outputs":[{"text":""}],"id":"3bc0300b-b9c7-452d-8824-c6a8e3a11350","content":["### `defn` produces a computation graph of the tensor operations"],"cell_type":"markdown"},{"running":false,"prompt_number":24,"outputs":[{"type":"code","text":["{:module, Formula2, <<70, 79, 82, 49, 0, 0, 25, 12, 66, 69, 65, 77, 65, 116, 85, 56, 0, 0, 3, 111, 0, 0, 0, 59, 15, 69, 108, 105, 120, 105, 114, 46, 70, 111, 114, 109, 117, 108, 97, 50, 8, 95, 95, 105, 110, 102, 111, ...>>, {:cgraph_grad_softmax, 1}}"]}],"id":"567abb87-6118-4aac-a97d-51879e493ef3","content":["defmodule Formula2 do\r\n  import Nx.Defn\r\n\r\n  def raise(x) do\r\n    x |> inspect |> Kernel.raise\r\n  end\r\n\r\n  defmacro cgraph (expr) do\r\n    quote do\r\n      Nx.Defn.Kernel.transform(\r\n        unquote(expr),\r\n        &Formula2.raise/1\r\n      )\r\n    end\r\n  end\r\n\r\n  defn softmax(t) do\r\n    Nx.exp(t) / Nx.sum(Nx.exp(t))\r\n  end\r\n\r\n  defn grad_softmax(t) do\r\n    grad(t, Nx.exp(t) / Nx.sum(Nx.exp(t)))\r\n  end\r\n\r\n  defn cgraph_softmax(t) do\r\n    t |> softmax |> cgraph\r\n  end\r\n\r\n  defn cgraph_grad_softmax(t) do\r\n    t |> grad_softmax |> cgraph\r\n  end\r\n \r\nend"],"cell_type":"code"},{"running":false,"prompt_number":25,"outputs":[{"type":"html","text":"<pre>** (RuntimeError) #Nx.Tensor<\n  f32[4]\n  \n  Nx.Defn.Expr\n  parameter a                                 s64[4]\n  b = exp [ a ]                               f32[4]\n  c = exp [ a ]                               f32[4]\n  d = sum [ c, axes: nil, keep_axes: false ]  f32\n  e = divide [ b, d ]                         f32[4]\n>    nofile:5: Formula2.raise/1\n    nofile:25: anonymous fn/1 in Formula2.cgraph_softmax/1\n    (nx 0.1.0-dev) lib/nx/defn/evaluator.ex:20: Nx.Defn.Evaluator.__jit__/4\n    (stdlib 3.14) erl_eval.erl:680: :erl_eval.do_apply/6\n    (stdlib 3.14) erl_eval.erl:232: :erl_eval.expr/5\n    (stdlib 3.14) erl_eval.erl:888: :erl_eval.expr_list/6\n    (stdlib 3.14) erl_eval.erl:411: :erl_eval.expr/5\n    (elixir 1.11.3) src/elixir.erl:280: :elixir.recur_eval/3\n    (elixir 1.11.3) src/elixir.erl:265: :elixir.eval_forms/3\n    (elixir 1.11.3) lib/code.ex:700: Code.eval_quoted/3\n</pre>\n"}],"id":"e8d8d51d-f86a-480b-a9c0-5f37243f9460","content":["import Formula2\r\n[1, 2, 3, 4] |> Nx.tensor |> Formula2.cgraph_softmax"],"cell_type":"code"},{"running":false,"prompt_number":26,"outputs":[{"type":"html","text":"<pre>** (RuntimeError) #Nx.Tensor<\n  f32\n  \n  Nx.Defn.Expr\n  parameter a                                 s64\n  b = exp [ a ]                               f32\n  c = exp [ a ]                               f32\n  d = sum [ c, axes: nil, keep_axes: false ]  f32\n  e = divide [ b, d ]                         f32\n  f = divide [ e, d ]                         f32\n  g = negate [ f ]                            f32\n  h = multiply [ g, c ]                       f32\n  i = divide [ 1.0, d ]                       f32\n  j = multiply [ i, b ]                       f32\n  k = add [ h, j ]                            f32\n>    nofile:5: Formula2.raise/1\n    nofile:29: anonymous fn/1 in Formula2.cgraph_grad_softmax/1\n    (nx 0.1.0-dev) lib/nx/defn/evaluator.ex:20: Nx.Defn.Evaluator.__jit__/4\n    (stdlib 3.14) erl_eval.erl:680: :erl_eval.do_apply/6\n    (stdlib 3.14) erl_eval.erl:232: :erl_eval.expr/5\n    (stdlib 3.14) erl_eval.erl:888: :erl_eval.expr_list/6\n    (stdlib 3.14) erl_eval.erl:411: :erl_eval.expr/5\n    (elixir 1.11.3) src/elixir.erl:280: :elixir.recur_eval/3\n    (elixir 1.11.3) src/elixir.erl:265: :elixir.eval_forms/3\n    (elixir 1.11.3) lib/code.ex:700: Code.eval_quoted/3\n</pre>\n"}],"id":"07397911-2e63-4ab2-b314-6ef2e92492db","content":["import Formula2\r\n1 |> Nx.tensor |> Formula2.cgraph_grad_softmax"],"cell_type":"code"},{"prompt_number":null,"outputs":[{"text":""}],"id":"a9fe1048-b1ca-4f4e-81fa-77a1682b24d1","content":["## Nx backends\r\n\r\nThe functionality of Nx is implemented in interchangeable backends that compile numerical definitions into code for CPU or GPU\r\n\r\nCurrently there are three backends in the public repo:\r\n - binary -- the default backend that stores tensors in the BEAM as binaries\r\n - EXLA -- an Elixir client to Google's XLA (Accelerated Linear Algebra) library\r\n - TorchEx -- an Elixir client to LibTorch\r\n\r\n### Use\r\n```\r\n@defn_compiler EXLA\r\ndefn softmax(tensor) do\r\n  Nx.exp(n) / Nx.sum(Nx.exp(n))\r\nend\r\n```\r\n\r\n### Compilation\r\n```\r\nElixir AST\r\n-> compiles to .beam (Erlang VM bytecode)\r\n   -> executes into defn AST\r\n      -> compiles to GPU\r\n```\r\nhttps://dashbit.co/blog/nx-numerical-elixir-is-now-publicly-available\r\n\r\n### Benchmarks\r\n```\r\nName                       ips        average  deviation         median         99th %\r\nxla gpu f32 keep      15308.14      0.0653 ms    Â±29.01%      0.0638 ms      0.0758 ms\r\nxla gpu f64 keep       4550.59        0.22 ms     Â±7.54%        0.22 ms        0.33 ms\r\nxla cpu f32             434.21        2.30 ms     Â±7.04%        2.26 ms        2.69 ms\r\nxla gpu f32             398.45        2.51 ms     Â±2.28%        2.50 ms        2.69 ms\r\nxla gpu f64             190.27        5.26 ms     Â±2.16%        5.23 ms        5.56 ms\r\nxla cpu f64             168.25        5.94 ms     Â±5.64%        5.88 ms        7.35 ms\r\nelixir f32                3.22      311.01 ms     Â±1.88%      309.69 ms      340.27 ms\r\nelixir f64                3.11      321.70 ms     Â±1.44%      322.10 ms      328.98 ms\r\n\r\nComparison:\r\nxla gpu f32 keep      15308.14\r\nxla gpu f64 keep       4550.59 - 3.36x slower +0.154 ms\r\nxla cpu f32             434.21 - 35.26x slower +2.24 ms\r\nxla gpu f32             398.45 - 38.42x slower +2.44 ms\r\nxla gpu f64             190.27 - 80.46x slower +5.19 ms\r\nxla cpu f64             168.25 - 90.98x slower +5.88 ms\r\nelixir f32                3.22 - 4760.93x slower +310.94 ms\r\nelixir f64                3.11 - 4924.56x slower +321.63 ms\r\n```\r\nhttps://github.com/elixir-nx/nx/tree/main/nx#numerical-definitions"],"cell_type":"markdown"},{"prompt_number":null,"outputs":[{"text":""}],"id":"9688cefc-578c-42ed-942e-45d8f751ed54","content":["## Conclusion\r\n - Nx is pre-release, with lots of work still to be done\r\n - in the mean time, there's still heaps to play with\r\n - the current API is low-level with a slight focus on ML/AI\r\n - in the future there may be layers that can be used for DSP or other numerical computing domains"],"cell_type":"markdown"},{"prompt_number":null,"outputs":[{"text":""}],"id":"2f240d55-3645-4afd-9782-92dae095829a","content":["## Resources\r\n - https://github.com/elixir-nx/nx/tree/main/nx#resources"],"cell_type":"markdown"},{"running":true,"prompt_number":27,"outputs":[{"text":""}],"id":"8632bcfd-23cb-4ec9-80ab-ae4f82783979","content":["defmodule MNIST do\r\n  import Nx.Defn\r\n\r\n  defn init_random_params do\r\n    w1 = Nx.random_normal({784, 128}, 0.0, 0.1, names: [:input, :layer])\r\n    b1 = Nx.random_normal({128}, 0.0, 0.1, names: [:layer])\r\n    w2 = Nx.random_normal({128, 10}, 0.0, 0.1, names: [:layer, :output])\r\n    b2 = Nx.random_normal({10}, 0.0, 0.1, names: [:output])\r\n    {w1, b1, w2, b2}\r\n  end\r\n\r\n  defn softmax(logits) do\r\n    Nx.exp(logits) / Nx.sum(Nx.exp(logits), axes: [:output], keep_axes: true)\r\n  end\r\n\r\n  defn predict({w1, b1, w2, b2}, batch) do\r\n    batch\r\n    |> Nx.dot(w1)\r\n    |> Nx.add(b1)\r\n    |> Nx.logistic()\r\n    |> Nx.dot(w2)\r\n    |> Nx.add(b2)\r\n    |> softmax()\r\n  end\r\n\r\n  defn accuracy({w1, b1, w2, b2}, batch_images, batch_labels) do\r\n    Nx.mean(\r\n      Nx.equal(\r\n        Nx.argmax(batch_labels, axis: :output),\r\n        Nx.argmax(predict({w1, b1, w2, b2}, batch_images), axis: :output)\r\n      )\r\n    )\r\n  end\r\n\r\n  defn loss({w1, b1, w2, b2}, batch_images, batch_labels) do\r\n    preds = predict({w1, b1, w2, b2}, batch_images)\r\n    -Nx.sum(Nx.mean(Nx.log(preds) * batch_labels, axes: [:output]))\r\n  end\r\n\r\n  defn update({w1, b1, w2, b2} = params, batch_images, batch_labels, step) do\r\n    {grad_w1, grad_b1, grad_w2, grad_b2} = grad(params, loss(params, batch_images, batch_labels))\r\n\r\n    {\r\n      w1 - grad_w1 * step,\r\n      b1 - grad_b1 * step,\r\n      w2 - grad_w2 * step,\r\n      b2 - grad_b2 * step\r\n    }\r\n  end\r\n\r\n  defn update_with_averages({_, _, _, _} = cur_params, imgs, tar, avg_loss, avg_accuracy, total) do\r\n    batch_loss = loss(cur_params, imgs, tar)\r\n    batch_accuracy = accuracy(cur_params, imgs, tar)\r\n    avg_loss = avg_loss + batch_loss / total\r\n    avg_accuracy = avg_accuracy + batch_accuracy / total\r\n    {update(cur_params, imgs, tar, 0.01), avg_loss, avg_accuracy}\r\n  end\r\n\r\n  defp unzip_cache_or_download(zip) do\r\n    base_url = 'https://storage.googleapis.com/cvdf-datasets/mnist/'\r\n    path = Path.join(\"tmp\", zip)\r\n\r\n    data =\r\n      if File.exists?(path) do\r\n        IO.puts(\"Using #{zip} from tmp/\\n\")\r\n        File.read!(path)\r\n      else\r\n        IO.puts(\"Fetching #{zip} from https://storage.googleapis.com/cvdf-datasets/mnist/\\n\")\r\n        :inets.start()\r\n        :ssl.start()\r\n\r\n        {:ok, {_status, _response, data}} = :httpc.request(:get, {base_url ++ zip, []}, [], [])\r\n        File.mkdir_p!(\"tmp\")\r\n        File.write!(path, data)\r\n\r\n        data\r\n      end\r\n\r\n    :zlib.gunzip(data)\r\n  end\r\n\r\n  def download(images, labels) do\r\n    <<_::32, n_images::32, n_rows::32, n_cols::32, images::binary>> =\r\n      unzip_cache_or_download(images)\r\n\r\n    train_images =\r\n      images\r\n      |> Nx.from_binary({:u, 8})\r\n      |> Nx.reshape({n_images, n_rows * n_cols}, names: [:batch, :input])\r\n      |> Nx.divide(255)\r\n      |> Nx.to_batched_list(30)\r\n\r\n    IO.puts(\"#{n_images} #{n_rows}x#{n_cols} images\\n\")\r\n\r\n    <<_::32, n_labels::32, labels::binary>> = unzip_cache_or_download(labels)\r\n\r\n    train_labels =\r\n      labels\r\n      |> Nx.from_binary({:u, 8})\r\n      |> Nx.reshape({n_labels, 1}, names: [:batch, :output])\r\n      |> Nx.equal(Nx.tensor(Enum.to_list(0..9)))\r\n      |> Nx.to_batched_list(30)\r\n\r\n    IO.puts(\"#{n_labels} labels\\n\")\r\n\r\n    {train_images, train_labels}\r\n  end\r\n\r\n  def train_epoch(cur_params, imgs, labels) do\r\n    total_batches = Enum.count(imgs)\r\n\r\n    imgs\r\n    |> Enum.zip(labels)\r\n    |> Enum.reduce({cur_params, Nx.tensor(0.0), Nx.tensor(0.0)}, fn\r\n      {imgs, tar}, {cur_params, avg_loss, avg_accuracy} ->\r\n        update_with_averages(cur_params, imgs, tar, avg_loss, avg_accuracy, total_batches)\r\n    end)\r\n  end\r\n\r\n  def train(imgs, labels, params, opts \\\\ []) do\r\n    epochs = opts[:epochs] || 5\r\n\r\n    for epoch <- 1..epochs, reduce: params do\r\n      cur_params ->\r\n        {time, {new_params, epoch_avg_loss, epoch_avg_acc}} =\r\n          :timer.tc(__MODULE__, :train_epoch, [cur_params, imgs, labels])\r\n\r\n        epoch_avg_loss =\r\n          epoch_avg_loss\r\n          |> Nx.backend_transfer()\r\n          |> Nx.to_scalar()\r\n\r\n        epoch_avg_acc =\r\n          epoch_avg_acc\r\n          |> Nx.backend_transfer()\r\n          |> Nx.to_scalar()\r\n\r\n        IO.puts(\"Epoch #{epoch} Time: #{time / 1_000_000}s\")\r\n        IO.puts(\"Epoch #{epoch} average loss: #{inspect(epoch_avg_loss)}\")\r\n        IO.puts(\"Epoch #{epoch} average accuracy: #{inspect(epoch_avg_acc)}\")\r\n        IO.puts(\"\\n\")\r\n        new_params\r\n    end\r\n  end\r\nend\r\n\r\n{train_images, train_labels} =\r\n  MNIST.download('train-images-idx3-ubyte.gz', 'train-labels-idx1-ubyte.gz')\r\n\r\nIO.puts(\"Initializing parameters...\\n\")\r\nparams = MNIST.init_random_params()\r\n\r\nIO.puts(\"Training MNIST for 10 epochs...\\n\\n\")\r\nfinal_params = MNIST.train(train_images, train_labels, params, epochs: 10)\r\n\r\nIO.puts(\"Bring the parameters back from the device and print them\")\r\nfinal_params = Nx.backend_transfer(final_params)\r\nIO.inspect(final_params)\r\n\r\nIO.puts(\"AOT-compiling a trained neural network that predicts a batch\")\r\nNx.Defn.aot(\r\n  MNIST.Trained,\r\n  [{:predict, &MNIST.predict(final_params, &1), [Nx.template({30, 784}, {:f, 32})]}],\r\n  EXLA\r\n)\r\n\r\nIO.puts(\"The result of the first batch against the AOT-compiled one\")\r\nIO.inspect MNIST.Trained.predict(hd(train_images))"],"cell_type":"code"}]}],"metadata":{"name":"Kicking the tyres on Nx - Numerical Elixir - Robert Ellen - Elixir Australia"}}